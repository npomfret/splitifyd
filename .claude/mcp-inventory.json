{
  "description": "Inventory of available MCP servers and their capabilities",
  "servers": {
    "context7": {
      "name": "mcp__context7__",
      "purpose": "General code context search and analysis",
      "capabilities": [
        "Search across entire codebase",
        "Find code patterns and implementations",
        "Analyze dependencies and relationships",
        "Broad context understanding"
      ],
      "trigger_keywords": [
        "search", "find", "locate", "where is", "context", "codebase",
        "implementation", "usage", "references", "dependencies"
      ],
      "common_uses": [
        "Finding where functions are defined or used",
        "Understanding code relationships",
        "Locating specific implementations",
        "Analyzing code patterns"
      ]
    },
    "typescript-mcp": {
      "name": "mcp__typescript-mcp__",
      "purpose": "TypeScript/JavaScript AST analysis",
      "capabilities": [
        "Abstract Syntax Tree analysis",
        "Type information extraction",
        "Code structure analysis",
        "Pattern matching at AST level"
      ],
      "trigger_keywords": [
        "typescript", "javascript", "ast", "types", "interfaces",
        "components", "react", "performance", "bundle", "syntax"
      ],
      "common_uses": [
        "Analyzing React component performance",
        "Finding type definitions",
        "Understanding code structure",
        "Refactoring TypeScript code"
      ]
    },
    "ts-morph": {
      "name": "mcp__ts-morph__",
      "purpose": "TypeScript code manipulation and refactoring",
      "capabilities": [
        "Automated refactoring",
        "Code transformation",
        "Type-safe code modifications",
        "Bulk code changes"
      ],
      "trigger_keywords": [
        "refactor", "rename", "move", "extract", "transform",
        "modify", "update", "change", "restructure"
      ],
      "common_uses": [
        "Renaming variables/functions across files",
        "Extracting methods or components",
        "Moving code between files",
        "Automated code transformations"
      ]
    },
    "context-provider": {
      "name": "mcp__context-provider__",
      "purpose": "Enhanced code context and documentation",
      "capabilities": [
        "Provide code context",
        "Documentation extraction",
        "API understanding",
        "Code explanation"
      ],
      "trigger_keywords": [
        "explain", "understand", "document", "api", "context",
        "how does", "what does", "documentation"
      ],
      "common_uses": [
        "Understanding complex code sections",
        "Getting API documentation",
        "Explaining code behavior",
        "Providing implementation context"
      ]
    },
    "playwright": {
      "name": "mcp__playwright__",
      "purpose": "Browser automation and testing",
      "capabilities": [
        "Browser automation",
        "E2E test creation",
        "Web scraping",
        "UI interaction testing"
      ],
      "trigger_keywords": [
        "browser", "e2e", "end-to-end", "ui test", "automation",
        "playwright", "selenium", "web test", "click", "navigate"
      ],
      "common_uses": [
        "Creating E2E tests",
        "Automating browser interactions",
        "Testing user workflows",
        "Web scraping tasks"
      ]
    },
    "ide": {
      "name": "mcp__ide__",
      "purpose": "IDE diagnostics and integration",
      "capabilities": [
        "Get diagnostics/errors",
        "Linting information",
        "Type checking results",
        "IDE state information"
      ],
      "trigger_keywords": [
        "error", "diagnostic", "lint", "type error", "ide",
        "problem", "issue", "warning", "squiggle"
      ],
      "common_uses": [
        "Getting current file errors",
        "Understanding type issues",
        "Checking lint violations",
        "IDE integration tasks"
      ]
    }
  }
}