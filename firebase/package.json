{
  "name": "backend",
  "version": "1.0.0",
  "description": "Firebase backend system with Cloud Functions for storing and retrieving JSON documents",
  "scripts": {
    "build:scripts": "tsc --project tsconfig.build.json",
    "build": "npm run build:scripts && cd functions && npm run build",
    "clean": "tsx scripts/kill-emulators.ts && rm -rf firebase-export-* *.log functions/*.log ../*.log && rm -rf public",
    "super-clean": "npm run clean && rm -rf node_modules",
    "kill-emulators": "tsx scripts/kill-emulators.ts",
    "switch-instance": "tsx scripts/switch-instance.ts",
    "test": "ORIGINAL_TEST_SCRIPT=test node ../scripts/test-wrapper.js",
    "test:unit": "ORIGINAL_TEST_SCRIPT=test:unit node ../scripts/test-wrapper.js",
    "test:integration": "ORIGINAL_TEST_SCRIPT=test:integration node ../scripts/test-wrapper.js",
    "link-webapp": "rm -rf public && ln -sf ../webapp-v2/dist public",
    "start-emulators": "npm run kill-emulators && tsx scripts/generate-firebase-config.ts && export GCLOUD_PROJECT=splitifyd && tsx scripts/start-with-data.ts",
    "generate:test-data": "tsx scripts/generate-test-data.ts",
    "delete-firebase-data": "cd functions && node scripts/delete-firebase-data.js",
    "deploy": "echo 'Use deploy:prod for production deployment'",
    "deploy:all": "npx tsx scripts/deploy-from-fresh-checkout.ts all",
    "deploy:functions": "npx tsx scripts/deploy-from-fresh-checkout.ts functions",
    "deploy:hosting": "npx tsx scripts/deploy-from-fresh-checkout.ts hosting",
    "deploy:rules": "npx tsx scripts/deploy-from-fresh-checkout.ts rules",
    "deploy:indexes": "npx tsx scripts/deploy-from-fresh-checkout.ts indexes",
    "deploy:prod:inner": "GOOGLE_APPLICATION_CREDENTIALS=\"./service-account-key.json\" bash -c 'tsx scripts/switch-instance.ts prod && node scripts/prepare-functions-deploy.js && firebase deploy --only functions,firestore:rules,hosting && rm -f functions/.env'",
    "deploy:functions:inner": "GOOGLE_APPLICATION_CREDENTIALS=\"./service-account-key.json\" bash -c 'tsx scripts/switch-instance.ts prod && node scripts/prepare-functions-deploy.js && firebase deploy --only functions && rm -f functions/.env'",
    "deploy:hosting:inner": "GOOGLE_APPLICATION_CREDENTIALS=\"./service-account-key.json\" bash -c 'tsx scripts/switch-instance.ts prod && firebase deploy --only hosting && rm -f functions/.env'",
    "deploy:rules:inner": "GOOGLE_APPLICATION_CREDENTIALS=\"./service-account-key.json\" bash -c 'tsx scripts/switch-instance.ts prod && firebase deploy --only firestore:rules && rm -f functions/.env'",
    "deploy:indexes:inner": "GOOGLE_APPLICATION_CREDENTIALS=\"./service-account-key.json\" bash -c 'tsx scripts/switch-instance.ts prod && firebase deploy --only firestore:indexes --force && rm -f functions/.env'",
    "download:indexes": "GOOGLE_APPLICATION_CREDENTIALS=\"./service-account-key.json\" firebase firestore:indexes --project splitifyd > firestore.indexes.json",
    "seed-policies:prod": "tsx scripts/switch-instance.ts prod && tsx scripts/seed-policies.ts production && rm functions/.env",
    "logs": "firebase functions:log"
  },
  "author": "",
  "license": "MIT",
  "devDependencies": {
    "@types/node": "^24.0.14",
    "dotenv": "^17.2.3",
    "tsx": "^4.7.0",
    "typescript": "^5.8.3"
  },
  "dependencies": {
    "xss": "^1.0.15"
  }
}
