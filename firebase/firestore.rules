rules_version = '2';

// FIRESTORE SECURITY RULES - PRODUCTION READY
// These rules enforce proper security for all environments (dev, staging, production)
// Schema validation is handled at the application level via FirestoreWriter
// Environment parity principle: Dev and prod have identical code AND rules
// Security principle: Deny by default, allow only specific authenticated operations

service cloud.firestore {
  match /databases/{database}/documents {

    // Groups collection - production security rules
    match /groups/{groupId} {
      // Allow read only for authenticated users who are group members
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/group-memberships/$(request.auth.uid + '_' + groupId));

      // Deny all direct writes - only server functions can write to groups
      allow write: if false;
      
      // ShareLinks subcollection - for invite tracking
      match /shareLinks/{shareLinkId} {
        // Allow read for authenticated users to resolve share links
        allow read: if request.auth != null;
        // Deny all direct writes - only server functions can write share links
        allow write: if false;
      }
      
      // Comments subcollection - for group discussions
      match /comments/{commentId} {
        // Allow read only for group members
        allow read: if request.auth != null &&
          exists(/databases/$(database)/documents/group-memberships/$(request.auth.uid + '_' + groupId));
        // Only server functions can write comments
        allow write: if false;
      }
    }

    // Expenses collection - production security rules
    match /expenses/{expenseId} {
      // Allow read for any authenticated user
      allow read: if request.auth != null;

      // Deny all direct writes - only server functions can write to expenses
      allow write: if false;

      // Comments subcollection - for expense discussions
      match /comments/{commentId} {
        // Allow read for any authenticated user
        allow read: if request.auth != null;
        // Only server functions can write comments
        allow write: if false;
      }
    }
    
    // Settlements collection - production security rules
    match /settlements/{settlementId} {
      // Allow read only for authenticated users who are the payer or payee
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.payerId || request.auth.uid == resource.data.payeeId);

      // Deny all direct writes - only server functions can write to settlements
      allow write: if false;
    }
    
    // Group balances collection - production security rules
    match /group-balances/{groupId} {
      // Allow read only for group members
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/group-memberships/$(request.auth.uid + '_' + groupId));

      // Deny all writes - these should only be updated by server functions
      allow write: if false;
    }
    
    // Users collection - users can read/create/update their own documents
    match /users/{userId} {
      // Allow read if user is reading their own document
      allow read: if request.auth != null && request.auth.uid == userId;

      // Allow create if user is creating their own document
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow update if user is updating their own document (but not role field)
      allow update: if request.auth != null &&
        request.auth.uid == userId &&
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(["role"]);
    }
    
    // Policies collection - allow all authenticated users to read, deny writes
    match /policies/{policyId} {
      // Allow all authenticated users to read policies
      allow read: if request.auth != null;

      // Deny all direct writes - only server functions can write policies
      allow write: if false;
    }
    
    match /user-notifications/{userId} {
      // Users can only read their own notification documents
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Only server functions can write notifications (via admin SDK)
      allow write: if false;
    }

    // Group memberships collection (top-level V2 implementation)
    match /group-memberships/{membershipId} {
      // Users can read memberships where they are the user
      // Document ID format: userId_groupId, so we can extract userId from document ID
      allow read: if request.auth != null && 
        membershipId.matches('^' + request.auth.uid + '_.*');
      
      // Only server functions can write memberships (via admin SDK)
      allow write: if false;
    }

    // Default deny rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}