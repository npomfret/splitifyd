rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is a member of a group
    function isGroupMember(groupId) {
      return request.auth.uid in get(/databases/$(database)/documents/documents/$(groupId)).data.data.memberIds;
    }
    
    // Helper function to validate expense data structure
    function isValidExpenseData(data) {
      return data.keys().hasAll(['groupId', 'createdBy', 'paidBy', 'amount', 'description', 'category', 'date', 'splitType', 'participants', 'splits', 'memberIds', 'createdAt', 'updatedAt']) &&
             data.amount is number && data.amount > 0 &&
             data.description is string && data.description.size() > 0 && data.description.size() <= 200 &&
             data.category in ['food', 'transport', 'utilities', 'entertainment', 'shopping', 'accommodation', 'healthcare', 'education', 'other'] &&
             data.splitType in ['equal', 'exact', 'percentage'] &&
             data.participants is list && data.participants.size() > 0 &&
             data.splits is list && data.splits.size() > 0 &&
             data.paidBy in data.participants &&
             data.createdBy == request.auth.uid;
    }
    
    // Helper function to validate group data structure
    function isValidGroupData(data) {
      return data.keys().hasAll(['userId', 'data', 'createdAt', 'updatedAt']) &&
             data.userId == request.auth.uid &&
             data.data.keys().hasAll(['name', 'members', 'memberIds']) &&
             data.data.name is string && data.data.name.size() > 0 && data.data.name.size() <= 100 &&
             data.data.members is list &&
             data.data.memberIds is list;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }

    // Documents collection (groups)
    match /documents/{documentId} {
      // Allow read if user owns the document OR is a group member
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid in resource.data.data.memberIds
      );
      
      // Allow write only if user owns the document and data is valid
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.userId &&
        isValidGroupData(request.resource.data);
      
      // Allow create if user is authenticated, sets themselves as owner, and data is valid
      allow create: if request.auth != null && 
        isValidGroupData(request.resource.data);
        
      // Allow delete only if user owns the document
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Expenses collection
    match /expenses/{expenseId} {
      // Allow read if user is a member of the group this expense belongs to
      allow read: if request.auth != null && 
        isGroupMember(resource.data.groupId);
      
      // Allow create if user is group member, data is valid, and user is creator
      allow create: if request.auth != null && 
        isGroupMember(request.resource.data.groupId) &&
        isValidExpenseData(request.resource.data);
      
      // Allow update only if user created the expense, is still a group member, and data is valid
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.createdBy &&
        isGroupMember(resource.data.groupId) &&
        isValidExpenseData(request.resource.data) &&
        request.resource.data.createdBy == resource.data.createdBy; // Cannot change creator
      
      // Allow delete only if user created the expense and is still a group member
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.createdBy &&
        isGroupMember(resource.data.groupId);
    }
    
    // Group balances collection - read-only for group members, write-only for server
    match /group-balances/{groupId} {
      // Allow read if user is a member of the group
      allow read: if request.auth != null && 
        isGroupMember(groupId);
      
      // Deny all writes - these should only be updated by server functions
      allow write: if false;
    }
    
    // Processing events collection - server-only
    match /_processing_events/{eventId} {
      // Deny all access - server functions only
      allow read, write: if false;
    }
    
    // Users collection - users can read/update their own documents
    match /users/{userId} {
      // Allow read if user is reading their own document
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow update if user is updating their own document
      // (users can update acceptedPolicies, but not role)
      allow update: if request.auth != null && 
        request.auth.uid == userId &&
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(["role"]) ||
         isAdmin());
    }
    
    // Policies collection - admin only access
    match /policies/{policyId} {
      // Only admins can read policies
      allow read: if isAdmin();
      
      // Only admins can write policies
      allow write: if isAdmin();
    }
    
    // Default deny rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}